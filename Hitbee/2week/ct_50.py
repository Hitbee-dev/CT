''' 포켓몬 빵
빵을 구하고자 하는 m명의 사람이 있음

1번 사람은 1분에
2번 사람은 2분에
m번 사람은 m분에
각자의 베이스캠프에서 출발해서 편의점으로 이동함

사람들이 목표로 하는 편의점은 모두 다름

이 모든 일은 n*n 크기의 격자 위에서 진행됨

빵을 구하는 행동은 1분동안 진행되는데, 정확히 1, 2, 3 순서로 진행되어야 함

1. 격자에 있는 사람들이 본인이 가고 싶은 편의점을 향해 1칸 움직임
    -> 최단 거리로 움직이며, 최단거리로 움직이는 방법이 여러개라면
    북, 서, 동, 남 순서대로 움직임

2. 편의점에 도착하면 편의점에서 멈추고 이 때부터 다른 사람들은 해당 편의점이 있는 칸을 지나갈 수 없음

3. 현재 시간이 t분이고 t<=m이 되면 t번 사람은 자신이 가고싶은 편의점과 가장 가까이 있는 베이스캠프에 들어감
    -> 여기서 가장 가까이 있는 뜻 역시 최단거리
    -> 가장 가까이 있는 베이스캠프도 여러개라면 그 중 행(위, 아래)이 작은 베이스캠프, 행이 같다면 열(왼, 오른)이 작은 베이스 캠프로 들어감
    t번 사람이 베이스 캠프로 이동하는 데에는 시간이 전혀 소요되지 않음

    이때부터 다른사람들은 베이스 캠프가 있는 칸을 지나갈 수 없게 됨
    t번 사람이 편의점을 향해 움직이기 시작했더라도 해당 베이스 캠프는 앞으로 절대 지나갈 수 없음
'''

# testcase1
n, m = 5, 3
area = [[0, 0, 0, 0, 0],
        [1, 0, 0, 0, 1],
        [0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1]]
store = [[2, 3],
         [4, 4],
         [5, 1]]

player = {}
# 플레이어의 초기 위치
for i in range(m):
    player[i] = (-1, -1)

# 편의점 좌표 재설정 및 지도에 편의점 위치 추가
for idx in range(len(store)):
    nx, ny = store[idx][0]-1, store[idx][1]-1
    store[idx] = (nx, ny)
    area[nx][ny] = 2
print(store)

basecamp = {}
# 베이스캠프의 위치
for i in range(n):
    for j in range(n):
        # 만약 베이스캠프라면
        if area[i][j] == 1:
            basecamp[(i, j)] = []


# 1. 격자에 있는 사람들이 본인이 가고 싶은 편의점을 향해 1칸 움직임
#   -> 최단 거리로 움직이며, 최단 거리로 움직이는 방법이 여러개라면
#      북, 서, 동, 남 순서대로 움직임

# 2. 편의점에 도착하면 편의점에서 멈추고 다른 사람들은 해당 편의점이 있는 칸을 지나갈 수 없음

# 3. 현재 시간이 t분이고, t<=m이 되면 t번 사람은 자신이 가고싶은 편의점과 가장 가까이 있는 베이스캠프에 들어감
#   -> 여기서 가장 가까이 있는 뜻 역시 최단거리
#   -> 가장 가까이 있는 베이스캠프도 여러개라면 그 중 행(위, 아래)이 작은 베이스캠프,
#   -> 행도 같다면 열(왼, 오른)이 작은 베이스 캠프로 들어감
#   -> t번 사람이 베이스 캠프로 이동하는데에는 시간 소요 X

# 편의점에서 출발해서 베이스캠프까지 가는 최단거리 구함
# 단, 최단거리가 같다면 북, 서, 동, 남 순서대로 우선순위가 잡힘

for k, v in basecamp.items():
    print(k, v)

for a in area:
    print(a)

for k, v in player.items():
    print(k, v)





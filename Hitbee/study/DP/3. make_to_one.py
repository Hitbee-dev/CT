'''
정수 X가 주어졌을 때, 정수 X에 사용할 수 있는 연산은 다음과 같이 4가지 이다.
1. X가 5로 나누어 떨어지면 5로 나눈다.
2. X가 3으로 나누어 떨어지면 3으로 나눈다.
3. X가 2로 나누어 떨어지면 2로 나눈다.
4. X에서 1을 뺀다.

정수 X가 주어졌을 때, 연산 4개를 적절히 사용해서 값을 1로 만들고자 한다.
연산을 사용하는 횟수의 최솟값을 출력하라.

예를들어 정수가 26이면 다음과 같이 계싼해서 3번의 연산이 최솟값이다.
26 -> 25 -> 5 -> 1
26 -> 13 -> 12 -> 4 -> 2 -> 1..

- 첫째줄에 정수 X가 주어진다.(1 <= X <= 30,000)
- 첫째줄에 연산을 하는 횟수의 최솟값을 출력
'''

# a_i = i 를 1로 만들기 위한 최소 연산 횟수
# a_i = min(a_{i-1}, a_{i/2}, a_{i/3}, a_{i/5}) +1

X = 26

# dp = [0] * (30000+1)    # 최대 X가 30000까지 들어올 수 있기 때문에 30000+1개 생성
dp = [0] * (X+1)        # 또는 X가 26이 들어왔기 때문에 26+1개 생성

for i in range(2, X+1): # 상향식이기 때문에 반대로
    # 현재의 수에서 1을 빼는 경우
    dp[i] = dp[i-1] + 1

    if i % 2 == 0:
        # 현재의 수가 2로 나누어 떨어지는 경우
        dp[i] = min(dp[i], dp[i//2]+1)
    if i % 3 == 0:
        # 현재의 수가 3으로 나누어 떨어지는 경우
        dp[i] = min(dp[i], dp[i//3]+1)
    if i % 5 == 0:
        # 현재의 수가 5로 나누어 떨어지는 경우
        dp[i] = min(dp[i], dp[i//5]+1)
print(dp[X])
# 연산 횟수를 dp table에 저장하는 방식으로 연산하면 쉽게 구할 수 있다.
# 효율적인 화폐 구성

'''
N가지 종류의 화폐가 있다.
이 화폐들의 개수를 최소한으로 이용해서 그 가치의 합이 M원이 되도록 하려고 한다.
이때 각 종류의 화폐는 몇 개라도 사용할 수 있다.

예를 들어 2원, 3원 단위의 화폐가 있을 때는 15원을 만들기 위해 3원을 5개 사용하는 것이 가장 최소한의 화폐 개수이다.

M원을 만들기 위한 최소한의 화폐 개수를 출력하는 프로그램을 작성하라.

1. 첫째 줄에 N, M이 주어진다. (1 <= N <= 100, 1<= M <= 10,000)
2. 이후에 N개의 줄에는 각 화폐의 가치가 주어진다.
   화폐의 가치는 10,000보다 작거나 같은 자연수 이다.

불가능할 때는 -1을 출력한다.

입력 예시1      출력예시1
2 15            5
2
3
-> 2, 3원을 이용해 15를 만들어야 함

입력예시2       출력예시2
3 4             -1
3
5
7
-> 3, 5, 7원을 이용해 4원을 만들어야 함
'''
N, M = 2, 15
coin = [2, 3]

# 초기화(10000이 최대 값이므로 INF(10001)로 설정)
dp = [10001] * (M+1)
dp[0] = 0
# 가지고있는 화폐로 만들 수 있는 금액을 순차적으로 표현하면 됨
# 2, 3, 5원 순서대로 만들 수 있는 금액 정하기
for i in range(N):
    for j in range(coin[i], M+1):
        # (i-k)원을 만드는 방법이 존재하는 경우 (dp[0] = 0으로 줬기 때문에 가능)
        if dp[j - coin[i]] != 10001:
            # 현재값 = 최솟값(현재값, 현재값 - 계산할 코인 + 1)
            dp[j] = min(dp[j], dp[j - coin[i]]+1)
if dp[M] != 10001:
    print(dp[M])
else:
    print(-1)
print(dp)